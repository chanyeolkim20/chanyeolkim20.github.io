{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "hw4.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "MXEy7YfCvt6C"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HjRhJr5Xvy9J"
      },
      "source": [
        "def legendre(n, x):\n",
        "  if n==0:\n",
        "    return 1\n",
        "  elif n==1:\n",
        "    return x\n",
        "  else:\n",
        "    return (((2*n)-1)*x*legendre(n-1, x) - (n-1)*legendre(n-2, x))/n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qc1yf1Alxv-5"
      },
      "source": [
        "def iroots(n):\n",
        "  x = np.linspace(-1, 1, num=101, endpoint = True)\n",
        "  #x = np.delete(x,0)\n",
        "  iroots = []\n",
        "  for i in range(len(x)-1):\n",
        "    if legendre(n,x[i])*legendre(n, x[i+1])<0:\n",
        "      if x[i]==-1:\n",
        "        iroots.append(-0.99)\n",
        "      elif x[i]==1:\n",
        "        iroots.append(0.99)\n",
        "      else:\n",
        "        iroots.append(x[i])\n",
        "    elif n%2==1 and x[i]==0:\n",
        "      iroots.append(x[i])\n",
        "  iroots = np.array(iroots)\n",
        "  return iroots"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xHbykvTCyrlL"
      },
      "source": [
        "def newton(n, x):\n",
        "  prime = (x*legendre(n,x)-legendre(n-1,x))*n/(x**2-1)\n",
        "  x1 = x-legendre(n, x)/prime\n",
        "  return x1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NJz9sT3GzNbh"
      },
      "source": [
        "def thresh_root(n, thresh):\n",
        "  guess = iroots(n)\n",
        "  while np.max(legendre(n,guess))>thresh:\n",
        "    guess = newton(n,guess)\n",
        "  return guess"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cZJQ2RE3z8zX"
      },
      "source": [
        "def intapprox(n):\n",
        "  x = thresh_root(n,10**-9)\n",
        "  w = 2*(1-x**2)/((n+1)**2*legendre(n+1,x)**2)\n",
        "  integral = np.sum(w/(1+8*x**2))\n",
        "  return integral"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pC7UKSQj1gM4",
        "outputId": "eee9e866-bffc-419c-d3fd-5c21b7f8d2db"
      },
      "source": [
        "ans = np.arctan(2*np.sqrt(2))/np.sqrt(2)\n",
        "errarr=[]\n",
        "narr=np.linspace(2,18,num=17,endpoint=True)\n",
        "\n",
        "for n in range(2, 19):\n",
        "  err = np.abs(ans - intapprox(n))\n",
        "  errarr.append(err)\n",
        "  print(n)\n",
        "  print(intapprox(n))\n",
        "  print(err)\n",
        "\n",
        "\n",
        "\n",
        "plt.plot(narr, errarr)\n",
        "plt.title(\"n vs error\")\n",
        "plt.xlabel(\"n\")\n",
        "plt.ylabel(\"error\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "0.5454545454545463\n",
            "0.32496520591255684\n",
            "3\n",
            "1.075642426481933\n",
            "0.20522267511482994\n",
            "4\n",
            "0.7780157031328212\n",
            "0.09240404823428194\n",
            "5\n",
            "0.9198568120802065\n",
            "0.04943706071310339\n",
            "6\n",
            "0.8464466794115204\n",
            "0.023973071955582737\n",
            "7\n",
            "0.8826238524374856\n",
            "0.0122041010703825\n",
            "8\n",
            "0.8643598601866999\n",
            "0.006059891180403287\n",
            "9\n",
            "0.8734652345045429\n",
            "0.0030454831374397973\n",
            "10\n",
            "0.8688988843735568\n",
            "0.001520866993546366\n",
            "11\n",
            "0.8711814858365381\n",
            "0.0007617344694349493\n",
            "12\n",
            "0.8700388615103636\n",
            "0.00038088985673956355\n",
            "13\n",
            "0.8706103385600028\n",
            "0.00019058719289966053\n",
            "14\n",
            "0.8703244298360456\n",
            "9.532153105751284e-05\n",
            "15\n",
            "0.8704674327909985\n",
            "4.768142389532937e-05\n",
            "16\n",
            "0.8703959036991016\n",
            "2.3847668001564237e-05\n",
            "17\n",
            "0.8704316788170305\n",
            "1.1927449927395806e-05\n",
            "18\n",
            "0.8704137861620548\n",
            "5.965205048363842e-06\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'error')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "HnRaajfCiYJX",
        "outputId": "21d71775-06f8-4403-cd52-38da6ebadfed"
      },
      "source": [
        "plt.plot(narr, errarr)\n",
        "plt.yscale('log')\n",
        "plt.title(\"n vs error\")\n",
        "plt.xlabel(\"n\")\n",
        "plt.ylabel(\"error\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'error')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MiJVIlAjh8gP"
      },
      "source": [
        "Plotting the y axis in the logarithmic scale yields what appears to be very similar to a linear plot. So we can say that as the degree N increases, the magnitude of error decreases at a decreasing rate, specifically following the trend of\n",
        "$$\\log(e) \\sim -n$$\n",
        "where e is the magnitude of error and n is the degree of the Legendre polynomial."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QKL2QrAbixB1"
      },
      "source": [
        "n=10\n",
        "err=10\n",
        "while err>10**-10:\n",
        "  err = np.abs(ans - intapprox(n))\n",
        "  print(n)\n",
        "  print(err)\n",
        "  n+=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aaOIfnUZiqga"
      },
      "source": [
        "While my computer didn't have enough RAM to fully run the code, the trend of the errors imply that the errors would fall in the 10E-10 region at about N=30."
      ]
    }
  ]
}